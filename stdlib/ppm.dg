#include <stdlib.h>
#include <stdio.h>
//simple (probably buggy) i/o for a subset of the
//https://en.wikipedia.org/wiki/Netpbm#File_formats
//PPM file format in RGB mode (P3)

struct ImagePPM {
	
	uint width;
	uint height;
	
	@private [uint8] data_red;
	@private [uint8] data_green;
	@private [uint8] data_blue;
	
	//current color to write
	uint8 red;
	uint8 green;
	uint8 blue;
}

fn ppm_ctor(uint width, uint height) ~> ImagePPM {
	
	ImagePPM resi = malloc(4+4+3*8);
	
	resi.data_red   = malloc(width*height);
	resi.data_green = malloc(width*height);
	resi.data_blue  = malloc(width*height);
	
	resi.red   = 0;
	resi.green = 0;
	resi.blue  = 0;
	
	resi.width  = width;
	resi.height = height;
	
	for row in 0 .. (height-1) {
		for col in 0 .. (width-1) {
		
			resi.data_red  [row*width + col] = 0;
			resi.data_green[row*width + col] = 0;
			resi.data_blue [row*width + col] = 0;
		}
	}
	
	return resi;
}

fn ppm_dtor(ImagePPM image) ~> bool {

	free(image.data_red);
	free(image.data_green);
	free(image.data_blue);
	free(image);
	return true;
}

fn ppm_set_color(ImagePPM image, uint8 red, uint8 green, uint8 blue) ~> bool {
	image.red   = red;
	image.green = green;
	image.blue  = blue;
	return true;
}

fn ppm_draw_pixel(ImagePPM image, uint row, uint col) ~> bool {
	
	if row >= image.height { return true; }
	if col >= image.width  { return true; }

	image.data_red  [row*image.width + col] = image.red;
	image.data_green[row*image.width + col] = image.green;
	image.data_blue [row*image.width + col] = image.blue;

	return true;
}

fn ppm_draw_line(ImagePPM image, uint row1, uint col1, uint row2, uint col2) ~> bool {
	
	//figure out the delta
	deltar = abs(row2 - row1);
	deltac = abs(col2 - col1);
	
	r1 = min(row1, row2);
	c1 = min(col1, col2);
	
	//r2 = max(row1, row2);
	//c2 = max(col1, col2);
	
	delta = max(deltar, deltac);
	
	for i in 0 .. delta {
		
		r = r1 + (i*deltar)/delta;
		c = c1 + (i*deltac)/delta;
		ppm_draw_pixel(image, r, c);
	}
	
	return true;
}

fn ppm_draw_rect(ImagePPM image, uint row, uint col, uint width, uint height) ~> bool {
	
	for r in row .. row + height {
		for c in col .. col + width {
			ppm_draw_pixel(image, r, c);
		}
	}
	
	return true;
}

fn ppm_draw_circle(ImagePPM image, uint row, uint col, uint radius) ~> bool {
	
	for r in row-radius .. row+radius {
		for c in col-radius .. col+radius {
			d1 = abs(row-r);
			d2 = abs(col-c);
			if d1*d1 + d2*d2 <= radius*radius {
				ppm_draw_pixel(image, r, c);
			}
		}
	}
	return true;
}

fn ppm_pixel_read_red(ImagePPM image, uint row, uint col) ~> uint8 {
	return image.data_red[row*image.width + col];
}
fn ppm_pixel_read_green(ImagePPM image, uint row, uint col) ~> uint8 {
	return image.data_green[row*image.width + col];
}
fn ppm_pixel_read_blue(ImagePPM image, uint row, uint col) ~> uint8 {
	return image.data_blue[row*image.width + col];
}


fn ppm_read([char] filename) ~> ImagePPM {

	file = fopen(filename, "r");

	[char] s = malloc(100);
	
	fgets(s, 99, file);
	
	uint width  = readuint8(file);
	uint height = readuint8(file);
	
	ImagePPM resimg = ppm_ctor(width, height);
	
	for row in 0 .. (height-1) {
		for col in 0 .. (width-1) {
		
			resimg.data_red  [row*width + col] = readuint8(file);
			resimg.data_green[row*width + col] = readuint8(file);
			resimg.data_blue [row*width + col] = readuint8(file);
		}
	}
	
	fclose(file);
	free(s);
	
	return resimg;
}

fn ppm_write(ImagePPM image, [char] filename) ~> bool {

	uint width  = image.width;
	uint height = image.height;
	
	file = fopen(filename, "w");
	
	fputs("P3\n", file);
	fprint_int(file, width);
	fputc(' ', file);
	fprint_int(file, height);
	fputs("255\n", file);
	
	for row in 0 .. (height-1) {
		for col in 0 .. (width-1) {
		
			fprint_int(file, image.data_red  [row*width + col]);
			fputs(" ", file);

			fprint_int(file, image.data_green[row*width + col]);
			fputs(" ", file);

			fprint_int(file, image.data_blue [row*width + col]);
			fputs(" ", file);
			
			fputs("\n", file);
		}
	}

	fclose(file);

	return true;
}

@private
fn readuint8(FILE file) ~> uint8 {
	
	int c = 0;
	
	while !('0' <= c <= '9') {
		
		c = fgetc(file);
	}
	
	uint8 r = 0;
	
	for i in 0 .. 2 {
	
		r += (c - 48) * ipow(10, (2-i));
		c = fgetc(file);
	}
	
	return r;
}
