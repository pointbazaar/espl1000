//simple implementation
//of basic 2d real-valued vector functions

struct V2 {
	float x1;
	float x2;
}

fn v2_ctor(float x1, float x2) ~> V2 {
	V2 res = malloc(4*2);
	res.x1 = x1;
	res.x2 = x2;
	return res;
}

fn v2_dtor(V2 v) ~> bool {
	free(v);
	return true;
}

fn v2_copy(V2 v) ~> V2 {
	return v2_ctor(v.x1, v.x2);
}

fn v2_add(V2 a, V2 b) ~> bool {
	a.x1 += b.x1;
	a.x2 += b.x2;
	return true;
}


fn v2_sub(V2 a, V2 b) ~> bool {
	a.x1 -= b.x1;
	a.x2 -= b.x2;
	return true;
}


fn v2_scale(V2 a, float r) ~> bool {
	a.x1 *= r;
	a.x2 *= r;
	return true;
}

//euclidean distance
fn v2_dist(V2 a, V2 b) ~> float {
	d1 = abs(a.x1 - b.x1);
	d2 = abs(a.x2 - b.x2);
	return sqrt(d1*d1 + d2*d2);
}

//manhattan distance
fn v2_dist_manhattan(V2 a, V2 b) -> float {
	float d1 = fabs(a.x1 - b.x1);
	float d2 = fabs(a.x2 - b.x2);
	return fmin_internal(d1, d2);
}

fn fmin_internal(float a, float b) -> float {
	if a < b { return a; }
	return b;
}

//magnitude
fn v2_mag(V2 v) -> float {
	return sqrt(v.x1*v.x1 + v.x2*v.x2);
}

fn v2_normalize(V2 v) ~> bool {

	float m = v2_mag(v);
	if(m < 0.000001){ return true; }
	
	v2_scale(v, 1.0/m);
	return true;
}
