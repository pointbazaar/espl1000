// wip usart driver for the atmega328p

fn usart_tx_char (char c) ~> uint8 {

	usart_tx_wait_udre();

	*char ptr = 0xc6;
	*ptr = c;

	return 0;
}

fn usart_tx (uint8 c) ~> uint8 {

	usart_tx_wait_udre();

	// put data into transmit buffer (UDR0)
	*uint8 ptr = 0xc6;
	*ptr = c;

	return 0;
}

fn usart_tx_wait_udre() ~> uint8 {

	*uint8 ptr = 0xc0;
	uint8 ucsr0a = *ptr; // UCSR0A
	// look at UDRE0 (USART data register empty)

	// UCSR0A: RXC0 TXC0 UDRE0 FE0 DOR0 UPE0 U2X0 MPCM0
	while ((ucsr0a & 0b100000) == 0){

		ucsr0a = *ptr;
	}

	return 0;
}

fn usart_calc_ubrr0(uint16 baudrate) ~> uint16 {
	// assuming clock of 16 MHz
	// only listing the most common values here
	// reference table 24-7 (Examples of UBRRn)
	if (baudrate == 2400) { return 416; }
	if (baudrate == 4800) { return 207; }
	if (baudrate == 9600) { return 103; }
	if (baudrate == 14400) { return 68; }
	if (baudrate == 19200) { return 51; }
	if (baudrate == 115200) { return 8; }

	return 103; // default 9600 baud
}

fn usart_init_baudrate_ubbr0l(uint16 value) ~> uint8 {

	*uint8 ptr = 0xc4;
	*ptr = value & 0xff;

	return 0;
}

fn usart_init_baudrate_ubbr0h(uint16 value) ~> uint8 {

	*uint8 ptr = 0xc5;
	*ptr = (value >> 8) & 0xff;

	return 0;
}

fn usart_init_baudrate(uint16 baudrate) ~> uint8 {
	// int(16000000/(16*9600)) -1
	// = 1000000 / 9600 - 1
	// = 104 - 1 = 103

	uint16 value = usart_calc_ubrr0(baudrate);

	// UBRR0L = 0xc4
	// UBRR0H = 0xc5
	usart_init_baudrate_ubbr0l(value);
	usart_init_baudrate_ubbr0h(value);

	return 0;
}

fn usart_set_ucsr0b () ~> uint8 {
	// UCSR0B: RXCIE0 TXCIE0 UDRIE0 RXEN0 TXEN0 UCSZ02 RXB80 TXB80

	// enable receiver and transmitter
	// UCSR0B = (1 << RXEN0) | (1 << TXEN0)
	//[0xc1] = (1 << 4) | (1 << 3);
	*uint8 ptr = 0xc1;
	*ptr = 0b01000;

	return 0;
}

fn usart_set_ucsr0c () ~> uint8 {
	// UCSR0C: UMSEL01 UMSEL00 UPM01 UPM00 USBS0 (UCSZ01 / UDORD0) (UCSZ00 / UCPHA0) UCPOL0

	// set frame format: 8 data, 2 stop bit
	// UCSR0C = (1 << USBS0) | (3 << UCSZ00)
	*uint8 ptr = 0xc2;
	*ptr = 0b00101110;

	return 0;
}

fn usart_init (uint16 baudrate) ~> uint8 {
	usart_init_baudrate(baudrate);
	usart_set_ucsr0b();
	usart_set_ucsr0c();

	return 0;
}

