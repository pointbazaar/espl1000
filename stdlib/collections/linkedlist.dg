#include <stdlib.h>

//A simple double-linked list

struct LinkedList<?T0> {

	@private uint size;
	
	@private bool is_empty;
	@private LLNode<?T0> head;
	@private LLNode<?T0> tail;
}

@private
struct LLNode<?T0> {

	?T0 value;
	bool has_next;
	
	LLNode<?T0> prev;
	LLNode<?T0> next;
}

fn linkedlist_ctor() ~> LinkedList<?T0> {

	LinkedList<?T0> res = malloc(4*8);
	res.size = 0;
	res.is_empty = true;
	return res;
}

fn linkedlist_ctor_int() ~> LinkedList<int> {

	LinkedList<int> res = malloc(4*8);
	res.size = 0;
	res.is_empty = true;
	return res;
}

fn linkedlist_dtor(LinkedList<?T0> l) ~> bool {

	if l.is_empty { free(l); return true; }
	
	LLNode<?T0> current = l.head;
	
	while current.has_next {
		
		old = current;
		free(old);
		
		current = current.next;
	}
	
	free(current); free(l);
	return true;
}

fn llnode_ctor() ~> LLNode<?T0> {
	LLNode<?T0> res = malloc(8*4);
	res.has_next = false;
	return res;
}

@halts
fn linkedlist_size(LinkedList<?T0> l) -> uint64 { 
	return l.size; 
}

fn linkedlist_push_front(LinkedList<?T0> l, ?T0 value) ~> bool {

	LLNode<?T0> x = llnode_ctor();
	x.value = value;
	
	if l.size == 0 {
		
		l.head = x;
		l.tail = x;
	} else {
	
		oldhead = l.head;
		
		oldhead.prev = x;
		x.next = oldhead;
		x.has_next = true;
		l.head = x;
	}
	l.size++;
	return true;
}

fn linkedlist_push_back(LinkedList<?T0> l, ?T0 value) ~> bool {

	LLNode<?T0> x = llnode_ctor();
	x.value = value;
	
	if l.size == 0 {
		
		l.head = x;
		l.tail = x;
	} else {
	
		oldtail = l.tail;
		
		oldtail.next = x;
		oldtail.has_next = true;
		x.prev = oldtail;
		l.tail = x;
	}
	l.size++;
	return true;
}

fn linkedlist_pop_front(LinkedList<?T0> l) ~> ?T0 {
	
	
	    val = l.head.value;
	oldhead = l.head;
	
	if l.size == 1 {
		
		l.is_empty = true;
		
	} else {
		l.head = oldhead.next;
	}
	
	free(oldhead);
	l.size--;
	
	return val;
}

fn linkedlist_pop_back(LinkedList<?T0> l) ~> ?T0 {
	
	?T0 val = l.tail.value;
	oldtail = l.tail;
	
	if l.size == 1 {
	
		l.is_empty = true;
		
	} else {
		l.tail = oldtail.prev;
	}
	
	free(oldtail);
	l.size--;
	
	return val;
}

fn linkedlist_contains(LinkedList<?T0> l, ?T0 value) -> bool {
	
	return linkedlist_index_of(l, value) >= 0;
}

fn linkedlist_index_of(LinkedList<?T0> l, ?T0 value) -> int {
	
	LLNode<?T0> current = l.head;
	int index = 0;
	
	while current.has_next {
	
		if current.value == value { 
			return index;
		}
		
		current = current.next;
		index++;
	}
	
	if current.value == value { 
		return index;
	}
	
	return -1;
}
