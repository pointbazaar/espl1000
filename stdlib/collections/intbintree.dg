//an implementation of a binary tree for integers

struct IntBinTree {

	@private
	bool has_root;

	@private
	IntBinTreeNode root;
}

@private
struct IntBinTreeNode {

	int key;

	bool has_left;
	IntBinTreeNode left;

	bool has_right;
	IntBinTreeNode right;
}

fn intbintree_contains(IntBinTree t, int key) -> bool {

	return intbintreenode_contains(t.root, key);
}

fn intbintree_size(IntBinTree t) -> uint {

	if !t.has_root { return 0; }

	return intbintreenode_size(t.root);
}

fn intbintree_visit (IntBinTree t, ( (int)->bool ) visitor) -> bool {

	return intbintreenode_visit(t.root, visitor);
}

//---------------------------------------------------------


@private
fn intbintreenode_contains(IntBinTreeNode t, int key) -> bool {

	current = t;

	while true {

		int c = compare(key, current.key);

		if c ==  0 { return true; }
		if c == -1 {
			if !current.has_left { return false; }
			current = current.left;
		}
		if c == 1 {
			if !current.has_right { return false; }
			current = current.right;
		}
	}

	return false;
}

@private
fn intbintreenode_size(IntBinTreeNode t) -> uint {

	res = 1;

	if t.has_left {
		res += intbintreenode_size(t.left);
	}
	if t.has_right {
		res += intbintreenode_size(t.right);
	}

	return res;
}

@private
fn intbintreenode_visit(IntBinTreeNode t, ((int)->bool) visitor) -> bool {

	if t.has_left {
		intbintreenode_visit(t.left, visitor);
	}
	visitor(t.key);
	if t.has_right {
		intbintreenode_visit(t.right, visitor);
	}

	return true;
}

@private
fn intbintreenode_findleftmost(IntBinTreeNode t) -> IntBinTreeNode {

	current = t;
	while current.has_left {
		current = current.left;
	}
	return current;
}

@private
fn intbintreenode_findrightmost(IntBinTreeNode t) -> IntBinTreeNode{

	current = t;
	while current.has_right {
		current = current.right;
	}
	return current;
}

@private
fn compare(int a, int b) -> int{

	if a < b { return -1; }
	if a > b { return  1; }
	return 0;
}
