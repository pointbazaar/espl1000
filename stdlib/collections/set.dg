#include <stdlib.h>

struct Set<?T0> {
	@private uint size;
	@private uint capacity;
	@private [?T0] arr;
}


fn set_size(Set<?T0> s) -> uint {
	
	return s.size;
}

fn set_contains(Set<?T0> s, ?T0 x) -> bool {

	for i in 1 .. s.size {

		if s.arr[i-1] == x { return true; }
	}
	
	return false;
}


fn set_remove(Set<?T0> s, ?T0 x) -> bool {

	if !set_contains(s, x) { return true; }

	//find the index of the element
	uint index = 0;
	for i in 0 .. s.size - 1 {
		if s.arr[i] == x { 
			
			index = i;
			break;
		}
	}

	//shift all elements left
	for j in index .. s.size - 1 {

		s.arr[j] = s.arr[j+1];
	}

	s.size--;

	return true;
}

