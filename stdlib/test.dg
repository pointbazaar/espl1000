#include <stdio.h>
#include <assert.h>
#include <string.h>

fn main() ~> int {
	try {
		return main2();
	} catch {}
}

fn status([char] module) ~> bool {
	[char] str = malloc(100);
	strcpy(str, "[stdlib][Test] ");
	strcat(str, module);
	puts(str);
	free(str);
	return true;
}

fn main2() ~> int throws {
	
	status("math"); test_math();

	status("primes"); test_primes();

	status("intset"); test_intset();
	
	status("intstack"); test_intstack();
	
	status("intarray"); test_intarray();
	
	status("intbintree"); test_intbintree();
	
	status("intll"); test_intll();
	
	status("polynomial"); test_polynomial();
	
	status("matrix"); test_matrix();
	
	status("v2"); test_v2();
	
	status("collision2d"); test_collision2d();

	puts("[stdlib] PASSED ALL TESTS\n");

	return 0;
}

fn assertf(float actual, float expect) -> bool {

	delta = actual - expect;
	return delta*delta < 0.001;
}

fn test_collision2d() ~> int throws {

	Collider2D c1 = collider2d_ctor(
		v2_ctor(0.0,0.0),
		v2_ctor(2.0,2.0)
	);
	
	Collider2D c2 = collider2d_ctor(
		v2_ctor(1.0,1.0),
		v2_ctor(2.0,2.0)
	);
	
	Collider2D c3 = collider2d_ctor(
		v2_ctor(4.0,1.0),
		v2_ctor(2.0,2.0)
	);
	
	assert(collision2d_overlap(c1,c2));
	
	assert(!collision2d_overlap(c1,c3));
	
	return 0;
}

fn test_v2() ~> int throws {
	
	v = v2_ctor(1.0, 0.0);
	w = v2_ctor(0.0, 1.0);
	
	assert(0.9 < v2_mag(v) < 1.1);
	
	assert(1 < v2_dist(v, w) < 2);
	
	v2_add(v, w);
	assert(0.9 < v.x2 < 1.1);
	
	v2_scale(w, 2.0);
	assert(1.9 < w.x2 < 2.1);
	
	v2_normalize(w);
	assert(0.9 < w.x2 < 1.1);
	
	return 0;
}

fn test_matrix() ~> int throws {

	Matrix m1 = matrix_ctor(2,2);
	m1.arr[0][0] = 1.0;
	m1.arr[0][1] = 0.0;
	m1.arr[1][0] = 0.0;
	m1.arr[1][1] = 1.0;
	
	Matrix m2 = matrix_ctor(2,2);
	m2.arr[0][0] = 2.0;
	m2.arr[0][1] = 0.0;
	m2.arr[1][0] = 0.0;
	m2.arr[1][1] = 2.0;
	
	Matrix m3 = matrix_add(m1, m2);
	
	assert(assertf(m3.arr[0][0], 3.0));
	assert(assertf(m3.arr[0][1], 0.0));
	assert(assertf(m3.arr[1][0], 0.0));
	assert(assertf(m3.arr[1][1], 3.0));
	
	Matrix m4 = matrix_sub(m1, m2);
	
	assert(assertf(m4.arr[0][0], -1.0));
	assert(assertf(m4.arr[0][1], 0.0));
	assert(assertf(m4.arr[1][0], 0.0));
	assert(assertf(m4.arr[1][1], -1.0));
	
	Matrix m5 = matrix_mul(m1, m2);
	
	assert(assertf(m5.arr[0][0], 2.0));
	assert(assertf(m5.arr[0][1], 0.0));
	assert(assertf(m5.arr[1][0], 0.0));
	assert(assertf(m5.arr[1][1], 2.0));
	
	Matrix m6 = matrix_submatrix(m1, 1, 1);
	
	assert(assertf(m6.arr[0][0], 1.0));
	
	float d = matrix_det(m1);
	
	assert(assertf(d, 1.0));
	
	matrix_dtor(m1);
	matrix_dtor(m2);
	matrix_dtor(m3);
	matrix_dtor(m4);
	matrix_dtor(m5);
	matrix_dtor(m6);
	
	return 0;
}

fn test_polynomial() ~> int {

	Poly a = poly_parse("3x^2 + 2x + 1");
	Poly b = poly_parse("4x + 5");
	
	Poly p1 = poly_parse("33.1x^4 + 4");
	poly_dtor(p1);
	
	Poly c = poly_add(a,b);
	
	assert(poly_deg(c) == 2);
	assert(c.coeff[0] == 6);
	assert(c.coeff[1] == 6);
	assert(c.coeff[2] == 3);
	
	Poly d = poly_mul(a,b); 
	//(4x+5)(3x^2 + 2x + 1)
	//= (4x)(3x^2 + 2x + 1) + 5(3x^2 + 2x + 1)
	//= 12x^3 + 8x^2 + 4x + 15x^2 + 10x + 5
	//= 12x^3 + 23x^2 + 14x + 5
	
	assert(poly_deg(d) == 3);
	assert(d.coeff[0] == 5);
	assert(d.coeff[1] == 14);
	assert(d.coeff[2] == 23);
	assert(d.coeff[3] == 12);
	
	Poly e = poly_derivative(a); //6x + 2
	assert(poly_deg(e) == 1);
	assert(e.coeff[0] == 2);
	assert(e.coeff[1] == 6);
	
	Poly f = poly_integral(b); //2x^2 + 5x
	assert(poly_deg(f) == 2);
	assert(f.coeff[0] == 0);
	assert(f.coeff[1] == 5);
	assert(f.coeff[2] == 2);
	
	poly_dtor(a);
	poly_dtor(b);
	poly_dtor(c);
	poly_dtor(d);
	poly_dtor(e);
	poly_dtor(f);

	return 0;
}

fn test_intll() ~> int throws {

	IntLL ll = intll_ctor();
	
	intll_push_back(ll, 3); //[3]
	
	assert(intll_size(ll) == 1);
	
	assert(intll_peek_front(ll) == 3);
	assert(intll_peek_back(ll) == 3);
	
	intll_push_front(ll, 5); //[5,3]
	
	assert(intll_index_of(ll, 3) == 1);
	
	assert(intll_pop_front(ll) == 5); //[3]
	
	assert(intll_size(ll) == 1);
	
	intll_pop_back(ll); //[]
	
	assert(intll_size(ll) == 0);
	
	intll_dtor(ll);

	return 0;
}

fn test_intbintree() ~> int {

	IntBinTree t = intbintree_ctor();
	
	intbintree_insert(t, 3);
	
	assert(intbintree_contains(t, 3));
	assert(intbintree_size(t) == 1);
	
	return 0;
}

fn test_intarray() ~> int {

	
	[int] arr = malloc(4*2);
	arr[0] = 3;
	arr[1] = 5;

	assert(intarray_sum(arr, 2) == 8);
	assert(intarray_average(arr, 2) == 4);
	
	assert(intarray_min(arr, 2) == 3);
	assert(intarray_max(arr, 2) == 5);

	return 0;
}

fn test_intstack() ~> int throws {
	
	IntStack s = intstack_ctor(10);
	
	intstack_push(s, 3);
	assert(intstack_size(s) == 1);
	assert(intstack_peek(s) == 3);
	assert(intstack_pop(s) == 3);
	
	assert(intstack_size(s) == 0);
	
	intstack_dtor(s);
	
	return 0;
}

fn test_intset() ~> int {

	IntSet s = intset_ctor(10);

	assert(intset_size(s) == 0);
	
	assert(!intset_contains(s,3));

	intset_insert(s,3);
	
	assert(intset_contains(s,3));
	assert(intset_size(s) == 1);

	intset_remove(s,3);
	assert(!intset_contains(s,3));

	intset_insert(s,0);
	for i in 1 .. 9 {
		
		intset_insert(s,i);
		assert(intset_contains(s,i-1));
	}

	intset_dtor(s);

	return 0;
}

fn test_math() ~> int {

	assert(sign(4) == 1);
	assert(sign(-8) == -1);

	assert( pow(2,3) == 8 );

	assert( faculty(3) == 6 );
	assert( faculty(4) == 24 );

	assert( min(4,5) == 4 );

	assert( max(2,6) == 6 );

	assert(gcd(10,15) == 5);
	assert(lcm(15,20) == 60);

	assert(round(3.5) == 4);
	assert(round(3.2) == 3);

	assert(ceil(3.2) == 4);
	assert(floor(3.7) == 3);
	
	assert(fib(1) == 0);
	assert(fib(2) == 1);
	assert(fib(3) == 1);
	assert(fib(4) == 2);
	assert(fib(5) == 3);

	return 0;
}

fn test_primes() ~> int {

	assert(isprime(2));
	assert(isprime(3));
	assert(!isprime(4));
	assert(isprime(5));

	return 0;
}

