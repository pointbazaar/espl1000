fn test_matrix() ~> int {

	Matrix m1 = matrix_ctor(2,2);
	m1.arr[0][0] = 1.0;
	m1.arr[0][1] = 0.0;
	m1.arr[1][0] = 0.0;
	m1.arr[1][1] = 1.0;
	
	Matrix m2 = matrix_ctor(2,2);
	m2.arr[0][0] = 2.0;
	m2.arr[0][1] = 0.0;
	m2.arr[1][0] = 0.0;
	m2.arr[1][1] = 2.0;
	
	Matrix m3 = matrix_add(m1, m2);
	
	assert(assertf(m3.arr[0][0], 3.0));
	assert(assertf(m3.arr[0][1], 0.0));
	assert(assertf(m3.arr[1][0], 0.0));
	assert(assertf(m3.arr[1][1], 3.0));
	
	Matrix m4 = matrix_sub(m1, m2);
	
	assert(assertf(m4.arr[0][0], -1.0));
	assert(assertf(m4.arr[0][1], 0.0));
	assert(assertf(m4.arr[1][0], 0.0));
	assert(assertf(m4.arr[1][1], -1.0));
	
	Matrix m5 = matrix_mul(m1, m2);
	
	assert(assertf(m5.arr[0][0], 2.0));
	assert(assertf(m5.arr[0][1], 0.0));
	assert(assertf(m5.arr[1][0], 0.0));
	assert(assertf(m5.arr[1][1], 2.0));
	
	Matrix m6 = matrix_submatrix(m1, 1, 1);
	
	assert(assertf(m6.arr[0][0], 1.0));
	
	float d = matrix_det(m1);
	
	assert(assertf(d, 1.0));
	
	matrix_dtor(m1);
	matrix_dtor(m2);
	matrix_dtor(m3);
	matrix_dtor(m4);
	matrix_dtor(m5);
	matrix_dtor(m6);
	
	return 0;
}
