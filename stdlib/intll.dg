#include <stdlib.h>

//A simple double-linked list of integers

struct IntLL {

	@private uint size;
	
	@private bool is_empty;
	@private IntLLNode head;
	@private IntLLNode tail;
}

@private
struct IntLLNode {

	int value;
	
	bool has_next;
	
	IntLLNode prev;
	IntLLNode next;
}

fn intll_ctor() ~> IntLL {

	IntLL res = malloc(3*8);
	res.is_empty = true;
	return res;
}

fn intll_dtor(IntLL l) ~> bool {

	if l.is_empty { free(l); return true; }
	
	IntLLNode current = l.head;
	
	while current.has_next {
		
		old = current;
		free(old);
		
		current = current.next;
	}
	
	free(current); free(l);
	return true;
}

fn intllnode_ctor() ~> IntLLNode {
	IntLLNode res = malloc(8*3);
	res.has_next = false;
	return res;
}

@halts
fn intll_size(IntLL l) -> uint { return l.size; }

fn intll_push_front(IntLL l, int value) ~> bool {

	IntLLNode x = intllnode_ctor();
	x.value = value;
	
	if l.size == 0 {
		
		l.head = x;
		l.tail = x;
	} else {
	
		oldhead = l.head;
		
		oldhead.prev = x;
		x.next = oldhead;
		x.has_next = true;
		l.head = x;
	}
	l.size++;
	return true;
}

fn intll_push_back(IntLL l, int value) ~> bool {

	IntLLNode x = intllnode_ctor();
	x.value = value;
	
	if l.size == 0 {
		
		l.head = x;
		l.tail = x;
	} else {
	
		oldtail = l.tail;
		
		oldtail.next = x;
		oldtail.has_next = true;
		x.prev = oldtail;
		l.tail = x;
	}
	l.size++;
	return true;
}

fn intll_pop_front(IntLL l) ~> int throws {
	
	if l.size == 0 { throw; }
	
	int val = l.head.value;
	oldhead = l.head;
	
	if l.size == 1 {
		
		l.is_empty = true;
		
	} else {
		l.head = oldhead.next;
	}
	
	free(oldhead);
	l.size--;
	
	return val;
}

fn intll_pop_back(IntLL l) ~> int throws {

	if l.size == 0 { throw; }
	
	int val = l.tail.value;
	oldtail = l.tail;
	
	if l.size == 1 {
	
		l.is_empty = true;
		
	} else {
		l.tail = oldtail.prev;
	}
	
	free(oldtail);
	l.size--;
	
	return val;
}

@halts
fn intll_peek_front(IntLL l) -> int throws {
	
	if l.size == 0 { throw; }
	
	return l.head.value;
}

@halts
fn intll_peek_back(IntLL l) -> int throws {

	if l.size == 0 { throw; }
	
	return l.tail.value;
}

fn intll_contains(IntLL l, int value) -> bool {
	
	return intll_index_of(l, value) >= 0;
}

fn intll_index_of(IntLL l, int value) -> int {
	
	IntLLNode current = l.head;
	int index = 0;
	
	while current.has_next {
	
		if current.value == value { 
			return index;
		}
		
		current = current.next;
		index++;
	}
	
	if current.value == value { 
		return index;
	}
	
	return -1;
}
