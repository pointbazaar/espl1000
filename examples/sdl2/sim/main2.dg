///usr/include/SDL2/SDL.h 

#include <SDL2/SDL.h>
#include <SDL2/SDL_rect.h>
#include <SDL2/SDL_events.h>
#include <time.h>

struct Planet {
	uint id;
	V2 pos;
	V2 velocity;
	float mass; //proportional to size
	uint32 color;
	uint32 size;
	bool live;
}
fn planet_ctor()~>Planet{
	Planet r = malloc(3*4 + 3*8 + 8);
	
	r.id       = rand() % 100000;
	r.pos      = v2_ctor(0.0,0.0);
	r.velocity = v2_ctor(0.0,0.0);

	r.mass = 10.0;
	r.size = 10;
	r.color = mycolor(200,200,200);
	r.live = true;
	return r;
}
fn planet_dtor(Planet p) ~> bool { 
	v2_dtor(p.pos); v2_dtor(p.velocity);
	free(p); return true;
}
fn main ()~>int {
	
	//srand(time(0));
	
	int screen_width  = 1800; int screen_height = 900;
	uint32 sdl_init_video = 0x00000020;
	
	if(sdl_init(sdl_init_video) < 0){
		printf("SDL could not initialize! SDL Error: %s\n", sdl_get_error());
		return 1;
	}
	
	uint32 sdl_windowpos_undefined = 0x1FFF0000;
	uint32 sdl_window_shown = 0x00000004;
	SDL_Window window = sdl_create_window("SDL Tutorial", 
		sdl_windowpos_undefined, sdl_windowpos_undefined,
		screen_width, screen_height, sdl_window_shown);
	//if(window == NULL){
	//	printf("window could not be created! SDL Error: %s\n", SDL_GetError());
	//	return 1;
	//}
	
	inner(window, screen_width, screen_height);
	
	return 0;
}

fn fillbg(SDL_Surface surface)~>bool{
	
	//SDL_FillRect(screenSurface, NULL, SDL_MapRGB(screenSurface->format, 0xff, 0xff, 0xff));
	sdl_fill_rect(surface, 0, mycolor(0,0,0));
	return true;
}

fn mycolor(uint8 r, uint8 g, uint8 b) -> uint32 {
	uint32 color = (r << 16) | (g << 8) | (b);
	return color;
}

fn init_planet(Planet p, int width, int height) ~> bool {

	p.pos.x1 = 1.0*(rand()%width);
	p.pos.x2 = 1.0*(rand()%height);
	
	p.velocity.x1 = 1.0*(rand()%20);
	p.velocity.x2 = 1.0*(rand()%20);
	
	if(p.pos.x1 >= width/2){
		p.velocity.x1 *= -1.0;
	}
	
	if(p.pos.x2 >= height/2){
		p.velocity.x2 *= -1.0;
	}
	
	//earth mass, approximated
	p.mass = 5972000000000000000000000.0;
	
	p.size = (rand()%100)+10;
	p.mass *= 0.01 * p.size;
	
	p.color = mycolor(rand()%256,rand()%256,rand()%256);
	p.live = true;
	
	return true;
}
fn init_planets(uint n, int width, int height)~>[Planet] {
	
	[Planet] planets = malloc(8*n);
	
	for i in 0 .. (n-1) {
		Planet p = planet_ctor();
		init_planet(p, width, height);
		planets[i] = p;
	}
	
	return planets;
}
fn planet_draw(SDL_Surface surface, Planet p)~>bool {

	if(!p.live){ return true; }

	SDL_Rect rect = malloc(4*4);
	rect.x = p.pos.x1;
	rect.y = p.pos.x2;
	
	rect.w = p.size;
	rect.h = p.size;
	
	//SDL_Surface mynull = sdl_load_bmp("notexist.bmp");
	SDL_Surface img = sdl_load_bmp("/home/alex/Pictures/planet.bmp");
	
	//printf("%s\n", sdl_get_error());
	
	sucess = sdl_blit_surface(img, 0, surface, 0);
	
	if sucess != 0 {
		printf("%s\n", sdl_get_error());
	}
	
	//sdl_fill_rect(surface, rect, p.color);
	sdl_free_surface(img);
	free(rect);
	return true;
}
fn inner(SDL_Window window, int width, int height)~>bool{
	
	SDL_Surface surface = sdl_get_window_surface(window);
	
	uint n = 2;
	[Planet] planets = init_planets(n, width, height);
	
	uint seconds = 5;
	uint millis = seconds * 1000;
	uint n_steps = seconds * 30;
	uint millis_per_step = millis/n_steps;
	
	uint count_steps = 0;
	while (n_steps > count_steps){
		
		fillbg(surface);

			/*
		SDL_Event e = malloc(100); //idk how big it is
		//e.key = malloc(100);
		//e.key.keysym = malloc(100);
		
		if sdl_poll_event(e) != 0 {
			
			sdl_quit = 0x100;
			
			sdl_keydown = 0x300;
			
			if e.type == sdl_quit { exit(0); }
			
			if e.type == sdl_keydown {
				
				uint sdlk_up = 82 | (1 << 30);
				
				//if e.key.keysym.sym == sdlk_up {
					
					//printf("up key\n");
				//}
			}
		}*/
		
		for j in 0 .. (n-1) {
			
			Planet p = planets[j];
			
			planet_draw(surface, p);
			
			if p.pos.x1 >= width { p.pos.x1 = 0.0; }
			if p.pos.x1 < 0.0 { p.pos.x1 = width*1.0; }
			
			if p.pos.x2 >= height { p.pos.x2 = 0.0; }
			if p.pos.x2 < 0.0 { p.pos.x2 = height*1.0; }
			
		}
		
		sdl_update_window_surface(window);
		sdl_delay(millis_per_step);
		count_steps++;
	}
	
	return true;
}
