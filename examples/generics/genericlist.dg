
struct List<?T0> {
	[?T0] arr;
	uint count;
	uint cap;
}

fn list_init(List<?T0> list) ~> bool {

	list.cap   = 10;
	list.count = 0;
	list.arr   = malloc(8*list.cap);
	return true;
}

fn list_add(List<?T0> list, ?T0 elem) ~> bool {

	if list.count >= list.cap {

		list.cap *= 2;
		list.arr  = realloc(list.arr, 8*list.cap);
	}

	list.arr[list.count] = elem;
	list.count++;
	return true;
}

fn list_get(List<?T0> list, uint index) ~> ?T0 {
	return list.arr[index];
}

fn main()~>int{

	List<int> list = malloc(8*3);
	list_init(list);

	//list.arr[0] = 3;
	//int k = list.arr[0];

	for k in 1 .. 10 {
		list_add(list, k);
	}

	List<List<int> > list2 = malloc(8*3);
	list_init(list2);


	List<int> elem = malloc(8*3);
	list_init(elem);

	list_add(elem, 9);
	list_add(elem, 10);

	list_add(list2, elem);


	//TODO: work on typechecker/typeinference here
	//(it makes mistaks with below statements)
	//List<int> res = list_get(list2, 0);

	return 0;
}
