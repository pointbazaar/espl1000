//MAYBE LATER:

SimpleExpression ::= Term (op Term)*
Expression ::= SimpleExpression | SimpleType

//through this change, we could pass simple types as Type Parameters.

/*
    ArrayConstant is complicating stuff. maybe i should convert it to syntactic sugar?
    I converted StringConstant to syntactic sugar and that worked great.
    What would be needed to convert arrayconstantnode to syntactic sugar?

    Maybe convert the array constant to a subroutine call ,
    or varyous subroutine calls such as arr3(MyType,item1,item2,item3); for an array of 3 arguments.

    this subroutine call would create the array in question and return a reference to it.
    so it can be used in expressions.

maybe i should remove the array constant entirely from the language.
it is not that essential. and it would simplify the grammar.

but i should create a subroutine with type parameter then in order to create an array of a desired type.
but i can just create a '*' type which tells the compiler 'Do not typecheck this, it is ok' , but that would be on the same
level of savagery as 'type casting' and we do not want to get dirty with savage non-typechecked stuff.
so type parameters are the way to go brothers. just need to find a way to implement them.
*/

//MAYBE

//this is a kind of expression inspired by haskell.
//it is similar to the ternary operator
//maybe i should implement them
ifThenElse ::= 'if' expression 'then' expression 'else' expression

// // functions are always public
//functionTypeDecl ::= functionName '::' (Type '->')* Type
// // like in haskell, there should be pattern matching available, so multiple definitions depending
// // on the value of the pattern
//function ::= namedFunction | anonFunction
//namedFunction ::= functionName identifier* = value
//value ::= arrayConstant | boolConstant | integerConstant | string | keywordConstant | functionCall | value op value | ...
//functionName ::= identifier
//functionCall ::= functionName expression*
//anonFunction ::= '\' declaredArgument* '->' value

