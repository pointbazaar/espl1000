Recently thought about subroutine type signatures and
how subroutines are declared.

//this currently looks the best to me
//because it seperates the implementation,
//the types, and the interesting properties we also want to track.
//These 'concepts' exist in their own world, but are connected by the name of the subroutine.
//They are also connected by being close together.
//To be clear, the order of them in source code would be fixed as shown.

subr :: @{terminates, public}
subr :: (uint a, uint b) -> uint
subr :: {
        return a+b;
}
