arrow         ::= "->" | "~>"
lowercase     ::= 'a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|'m'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'u'|'v'|'w'|'x'|'y'|'z'
uppercase     ::= 'A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'I'|'J'|'K'|'L'|'M'|'N'|'O'|'P'|'Q'|'R'|'S'|'T'|'U'|'V'|'W'|'X'|'Y'|'Z'
digit         ::= '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'
alphanumeric  ::= lowercase | uppercase | digit
Op            ::= "+" | "-" | "*" | "/" | "%" | "<<" | ">>" | "|" | "&" | "^" | "||" | "&&"
Id            ::= lowercase (lowercase | '_' | digit)*


AST           ::= Namespace+

Namespace     ::= ExternC* StructDecl* Method*

StructDecl    ::= "struct" SimpleType '{' StructMember* '}'

MethodDecl    ::= "fn" Id '(' DeclArg* ')' arrow Type ("throws")?

ExternC       ::= "externc" (MethodDecl | StructDecl) StringConst 

Method        ::= MethodDecl StmtBlock

ArrayConstant ::= '[' Expr (',' Expr)* ']'

StructMember  ::= Type Id ';'

SimpleVar     ::= Id ('[' Expr ']')*

Variable      ::= SimpleVar ('.' Variable)?

StmtBlock     ::= '{' Stmt* '}'

DeclArg       ::= Type Id? 

SubrType      ::= '(' Type* ')' arrow Type ("throws")?

StructType    ::= uppercase alphanumeric* ('<' Type (',' Type)* '>')? | "#"

PrimitiveType ::= "int" | "float" | "uint" | "char" | "bool" | "uint8" | "int8" | "uint16" | "int16" | "uint32" | "int32" | "uint64" | "int64"

SimpleType    ::= PrimitiveType | StructType 

BasicType     ::= SimpleType | '(' SubrType ')'

TypeParam     ::= "?T" digit

ArrayType     ::= '[' Type ']'

Type          ::= BasicType | TypeParam | ArrayType

Stmt          ::= ( Call ';' )
		| whileStmt | ifStmt | forStmt | switchStmt | trycatchStmt
		| returnStmt | assignStmt
		| "break" ';' | "continue" ';' | "throw" ';'

Call         ::= Variable '(' (Expr (, Expr)*)?  ')'

whileStmt    ::= "while" Expr        StmtBlock
forStmt      ::= "for" Id "in" Range StmtBlock

ifStmt       ::= "if" Expr StmtBlock ( "else" StmtBlock )?
				
returnStmt   ::= "return" Expr? ';'

assignStmt   ::= Type? Variable '=' Expr ';'

switchStmt   ::= "switch" Expr '{' caseStmt* '}'

caseStmt     ::= "case" ConstValue StmtBlock?

trycatchStmt ::= "try" StmtBlock "catch" StmtBlock

ConstValue   ::= BoolConst | IntConst | BinConst | HexConst | CharConst | FloatConst

Range        ::= Expr ".." Expr

UnOpTerm     ::= Op Term 

Term         ::= ConstValue | StringConst | Call | '(' Expr ')' | Variable | Lambda

Expr         ::= UnOpTerm (Op UnOpTerm)*

Lambda       ::= '(' Id (',' Id)* ')' arrow Expr
